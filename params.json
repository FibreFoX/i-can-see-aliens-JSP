{"name":"JavaEE testing-project \"Aliens JSP\"","tagline":"Testing with TomEE, JSP, CDI and a lot of Arquillian","body":"I can see Aliens (JSP)\r\n====================\r\n\r\nAfter having the opportunity to finally get my tests running in one of my projects, i thought by myself:\r\n    why not put all together in one testing-example-project having all kind of tests i find useful.\r\n\r\nThe result is what you are reading right now.\r\n\r\n## Short-description of the project ##\r\nI created a small billboard, where users can register themselves and add comments to the given billboard-entries. There is NO rights-management. Users can delete their accounts and delete their billboard-entries (this will delete the comments too). There is no authentification or anti-spam-technology included, its focused on \"how to put tests into a project using a lot of Arquillian\".\r\n\r\n\r\n## How does it work ##\r\nI had to fiddle a lot with the dependencies (you can see my [cdi-sessionscoped-login](github.com/FibreFoX/cdi-sessionscoped-login)-project from the last year), had to learn how maven-profiles are working (never created them first-hand), mostly because Arquillian brings no equal support for testing-frameworks, using JUnit seems to be the more stable than TestNG, but i really like TestNG, so i had to mix the testing-frameworks.\r\nThere was another problem: you can only have ONE \"testing-container\" in classpath for Arquillian, so i had to separate them into maven-profiles for better dependency-handling.\r\nBut there comes a downside: my current IDE (Netbeans) goes a little crazy, because when not selecting the right profile i see red lights on my test-packages, so you can get confused by thinking \"oh my gosh, my tests are all broken...\".\r\n\r\n\r\n## What tests are included ##\r\nTesting a software includes a lot of pain, when not having the right tools or not having enough knowledge how to write testable code. For having testable code, i tried to utilize CDI as much as possible and using producers for my scoped instances. Maybe there are a lot of reasons not to use producers like i did, but it works out for me. I tried to create the following types of tests:\r\n* unit-tests _(using TestNG)_\r\n* integration-tests _(using TestNG and Arquillian)_\r\n* functional-tests _(using JUnit, Arquillian and Arquillian Drone/Graphene)_\r\n* graybox-tests _(using JUnit, Arquillian, Arquillian Drone/Graphene and Arquillian WARP)_\r\n\r\n\r\n## Used frameworks/software (buzzword-bingo) ##\r\n* Maven 3.1\r\n* HTML 5\r\n* Twitter Bootstrap (for being hipster and responsive)\r\n* CDI (only one case where i used @EJB-annotation, because of unclear CDI-standard)\r\n* JavaEE 6\r\n* JPQL\r\n* EclipseLink (JPA 2)\r\n* TomEE\r\n* Arquillian\r\n* Arquillian Drone/Graphene2\r\n* Arquillian Warp\r\n* JaCoCo\r\n* ShrinkWrap\r\n* PhantomJS _(as browser for easy project-sharing and CI-systems like Jenkins)_\r\n* SonarQube\r\n\r\n\r\n## How to use ##\r\nFirst of all, you have to download the binaries i used for testing: http://phantomjs.org/download.html\r\nPut that corresponding files into \"tools/phantom/YOUR-ARCH/\" and check the pom.xml, if the paths are matching.\r\nThe default `mvn clean install` will only compile the project and will produce a fine WAR-file, but does not execute any test (because they are separated in respective profiles). I put a small helper (for windows-users) called `createAndAllTests.bat` which does nothing more than this\r\n\r\n    mvn clean install\r\n    mvn test -Punit\r\n    mvn integration-test -Pintegration\r\n    mvn integration-test -Pfunctional\r\n    mvn integration-test -Pgraybox\r\n\r\n\r\n## Plans for the future ##\r\nHaving to develop in teams often brings the problem with binaries, so i have chosen to put that binaries in a separated tools-folder, haven't found them on mvnrepository, but maybe in the future there will be a reliable source.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}